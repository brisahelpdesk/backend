import { Injectable } from '@nestjs/common';
import { IBaseRepository } from '../../../interfaces/base-repository.interface';
import { OfferingType } from './offering-type.entity';
import { PersistenceService } from '../../persistence/persistence.service';
import { OfferingTypePrismaMapper } from './offering-type.mapper';

@Injectable()
export class OfferingTypeRepository implements IBaseRepository<OfferingType> {
    constructor (private readonly persistence: PersistenceService) {}

    async create(data: OfferingType): Promise<OfferingType> {
        const created = await this.persistence.tb_offering_type.create({
            data: {
                // uuid is generated by DB
                name: data.name,
                description: data.description,
                created_at: data.created_at ?? new Date(),
                updated_at: data.updated_at ?? new Date(),
            },
        });
        return OfferingTypePrismaMapper.toDomain(created);
    }

    async findAll(): Promise<OfferingType[]> {
        const rows = await this.persistence.tb_offering_type.findMany({
            orderBy: { created_at: 'desc' },
        });
        return rows.map(OfferingTypePrismaMapper.toDomain);
    }

    async findByUUID(uuid: string): Promise<OfferingType | null> {
        const row = await this.persistence.tb_offering_type.findUnique({ where: { uuid } });
        return row ? OfferingTypePrismaMapper.toDomain(row) : null;
    }

    async update(uuid: string, data: Partial<OfferingType>): Promise<OfferingType> {
        const updated = await this.persistence.tb_offering_type.update({
            where: { uuid },
            data: {
                name: data.name,
                description: data.description,
                updated_at: data.updated_at ?? new Date(),
            },
        });
        return OfferingTypePrismaMapper.toDomain(updated);
    }

    async delete(uuid: string): Promise<OfferingType> {
        const deleted = await this.persistence.tb_offering_type.delete({ where: { uuid } });
        return OfferingTypePrismaMapper.toDomain(deleted);
    }
}